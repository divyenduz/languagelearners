// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  payment: (where?: PaymentWhereInput) => Promise<boolean>;
  telemetry: (where?: TelemetryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  payment: (where: PaymentWhereUniqueInput) => PaymentNullablePromise;
  payments: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Payment>;
  paymentsConnection: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentConnectionPromise;
  telemetry: (where: TelemetryWhereUniqueInput) => TelemetryNullablePromise;
  telemetries: (args?: {
    where?: TelemetryWhereInput;
    orderBy?: TelemetryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Telemetry>;
  telemetriesConnection: (args?: {
    where?: TelemetryWhereInput;
    orderBy?: TelemetryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TelemetryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPayment: (data: PaymentCreateInput) => PaymentPromise;
  updatePayment: (args: {
    data: PaymentUpdateInput;
    where: PaymentWhereUniqueInput;
  }) => PaymentPromise;
  updateManyPayments: (args: {
    data: PaymentUpdateManyMutationInput;
    where?: PaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertPayment: (args: {
    where: PaymentWhereUniqueInput;
    create: PaymentCreateInput;
    update: PaymentUpdateInput;
  }) => PaymentPromise;
  deletePayment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  deleteManyPayments: (where?: PaymentWhereInput) => BatchPayloadPromise;
  createTelemetry: (data: TelemetryCreateInput) => TelemetryPromise;
  updateTelemetry: (args: {
    data: TelemetryUpdateInput;
    where: TelemetryWhereUniqueInput;
  }) => TelemetryPromise;
  updateManyTelemetries: (args: {
    data: TelemetryUpdateManyMutationInput;
    where?: TelemetryWhereInput;
  }) => BatchPayloadPromise;
  upsertTelemetry: (args: {
    where: TelemetryWhereUniqueInput;
    create: TelemetryCreateInput;
    update: TelemetryUpdateInput;
  }) => TelemetryPromise;
  deleteTelemetry: (where: TelemetryWhereUniqueInput) => TelemetryPromise;
  deleteManyTelemetries: (where?: TelemetryWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  payment: (
    where?: PaymentSubscriptionWhereInput
  ) => PaymentSubscriptionPayloadSubscription;
  telemetry: (
    where?: TelemetrySubscriptionWhereInput
  ) => TelemetrySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserType = "ADMIN" | "USER";

export type Plan =
  | "PAST"
  | "GUEST"
  | "INTRO_5"
  | "PLAN_9"
  | "YEARLY_100"
  | "LIFETIME_199";

export type TargetLanguage = "EN" | "DE" | "ES";

export type SourceLanguage = "AUTO" | "EN" | "DE" | "ES";

export type PaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "provider_subscription_id_ASC"
  | "provider_subscription_id_DESC"
  | "provider_payment_id_ASC"
  | "provider_payment_id_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type TelemetryType = "PROVIDER_PAYMENT_EVENT";

export type TelemetryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "telemetry_key_ASC"
  | "telemetry_key_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "payload_ASC"
  | "payload_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "source_language_ASC"
  | "source_language_DESC"
  | "target_language_ASC"
  | "target_language_DESC"
  | "plan_ASC"
  | "plan_DESC"
  | "type_ASC"
  | "type_DESC"
  | "telegram_id_ASC"
  | "telegram_id_DESC"
  | "telegram_chat_id_ASC"
  | "telegram_chat_id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PaymentCreateInput {
  id?: Maybe<ID_Input>;
  provider_subscription_id: String;
  provider_payment_id: String;
  amount: Int;
  user: UserCreateOneWithoutPaymentInput;
}

export type PaymentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  provider_payment_id?: Maybe<String>;
}>;

export interface UserUpsertWithoutPaymentInput {
  update: UserUpdateWithoutPaymentDataInput;
  create: UserCreateWithoutPaymentInput;
}

export interface PaymentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  provider_subscription_id?: Maybe<String>;
  provider_subscription_id_not?: Maybe<String>;
  provider_subscription_id_in?: Maybe<String[] | String>;
  provider_subscription_id_not_in?: Maybe<String[] | String>;
  provider_subscription_id_lt?: Maybe<String>;
  provider_subscription_id_lte?: Maybe<String>;
  provider_subscription_id_gt?: Maybe<String>;
  provider_subscription_id_gte?: Maybe<String>;
  provider_subscription_id_contains?: Maybe<String>;
  provider_subscription_id_not_contains?: Maybe<String>;
  provider_subscription_id_starts_with?: Maybe<String>;
  provider_subscription_id_not_starts_with?: Maybe<String>;
  provider_subscription_id_ends_with?: Maybe<String>;
  provider_subscription_id_not_ends_with?: Maybe<String>;
  provider_payment_id?: Maybe<String>;
  provider_payment_id_not?: Maybe<String>;
  provider_payment_id_in?: Maybe<String[] | String>;
  provider_payment_id_not_in?: Maybe<String[] | String>;
  provider_payment_id_lt?: Maybe<String>;
  provider_payment_id_lte?: Maybe<String>;
  provider_payment_id_gt?: Maybe<String>;
  provider_payment_id_gte?: Maybe<String>;
  provider_payment_id_contains?: Maybe<String>;
  provider_payment_id_not_contains?: Maybe<String>;
  provider_payment_id_starts_with?: Maybe<String>;
  provider_payment_id_not_starts_with?: Maybe<String>;
  provider_payment_id_ends_with?: Maybe<String>;
  provider_payment_id_not_ends_with?: Maybe<String>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  OR?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  NOT?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  telegram_id?: Maybe<String>;
  telegram_chat_id?: Maybe<String>;
}>;

export interface TelemetryCreateInput {
  id?: Maybe<ID_Input>;
  type: TelemetryType;
  telemetry_key: String;
  filename: String;
  payload: Json;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  source_language?: Maybe<SourceLanguage>;
  target_language?: Maybe<TargetLanguage>;
  plan?: Maybe<Plan>;
  type?: Maybe<UserType>;
  payment?: Maybe<PaymentUpdateManyWithoutUserInput>;
  telegram_id?: Maybe<String>;
  telegram_chat_id?: Maybe<String>;
}

export interface PaymentUpdateManyMutationInput {
  provider_subscription_id?: Maybe<String>;
  provider_payment_id?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface PaymentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  provider_subscription_id: String;
  provider_payment_id: String;
  amount: Int;
}

export interface TelemetrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TelemetryWhereInput>;
  AND?: Maybe<
    TelemetrySubscriptionWhereInput[] | TelemetrySubscriptionWhereInput
  >;
  OR?: Maybe<
    TelemetrySubscriptionWhereInput[] | TelemetrySubscriptionWhereInput
  >;
  NOT?: Maybe<
    TelemetrySubscriptionWhereInput[] | TelemetrySubscriptionWhereInput
  >;
}

export interface PaymentCreateManyWithoutUserInput {
  create?: Maybe<
    PaymentCreateWithoutUserInput[] | PaymentCreateWithoutUserInput
  >;
  connect?: Maybe<PaymentWhereUniqueInput[] | PaymentWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  source_language?: Maybe<SourceLanguage>;
  target_language?: Maybe<TargetLanguage>;
  plan?: Maybe<Plan>;
  type?: Maybe<UserType>;
  telegram_id?: Maybe<String>;
  telegram_chat_id?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  source_language?: Maybe<SourceLanguage>;
  target_language?: Maybe<TargetLanguage>;
  plan: Plan;
  type?: Maybe<UserType>;
  payment?: Maybe<PaymentCreateManyWithoutUserInput>;
  telegram_id?: Maybe<String>;
  telegram_chat_id?: Maybe<String>;
}

export interface PaymentUpdateManyDataInput {
  provider_subscription_id?: Maybe<String>;
  provider_payment_id?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface PaymentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  provider_subscription_id?: Maybe<String>;
  provider_subscription_id_not?: Maybe<String>;
  provider_subscription_id_in?: Maybe<String[] | String>;
  provider_subscription_id_not_in?: Maybe<String[] | String>;
  provider_subscription_id_lt?: Maybe<String>;
  provider_subscription_id_lte?: Maybe<String>;
  provider_subscription_id_gt?: Maybe<String>;
  provider_subscription_id_gte?: Maybe<String>;
  provider_subscription_id_contains?: Maybe<String>;
  provider_subscription_id_not_contains?: Maybe<String>;
  provider_subscription_id_starts_with?: Maybe<String>;
  provider_subscription_id_not_starts_with?: Maybe<String>;
  provider_subscription_id_ends_with?: Maybe<String>;
  provider_subscription_id_not_ends_with?: Maybe<String>;
  provider_payment_id?: Maybe<String>;
  provider_payment_id_not?: Maybe<String>;
  provider_payment_id_in?: Maybe<String[] | String>;
  provider_payment_id_not_in?: Maybe<String[] | String>;
  provider_payment_id_lt?: Maybe<String>;
  provider_payment_id_lte?: Maybe<String>;
  provider_payment_id_gt?: Maybe<String>;
  provider_payment_id_gte?: Maybe<String>;
  provider_payment_id_contains?: Maybe<String>;
  provider_payment_id_not_contains?: Maybe<String>;
  provider_payment_id_starts_with?: Maybe<String>;
  provider_payment_id_not_starts_with?: Maybe<String>;
  provider_payment_id_ends_with?: Maybe<String>;
  provider_payment_id_not_ends_with?: Maybe<String>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<PaymentScalarWhereInput[] | PaymentScalarWhereInput>;
  OR?: Maybe<PaymentScalarWhereInput[] | PaymentScalarWhereInput>;
  NOT?: Maybe<PaymentScalarWhereInput[] | PaymentScalarWhereInput>;
}

export interface PaymentUpsertWithWhereUniqueWithoutUserInput {
  where: PaymentWhereUniqueInput;
  update: PaymentUpdateWithoutUserDataInput;
  create: PaymentCreateWithoutUserInput;
}

export interface TelemetryUpdateManyMutationInput {
  type?: Maybe<TelemetryType>;
  telemetry_key?: Maybe<String>;
  filename?: Maybe<String>;
  payload?: Maybe<Json>;
}

export interface PaymentUpdateWithWhereUniqueWithoutUserInput {
  where: PaymentWhereUniqueInput;
  data: PaymentUpdateWithoutUserDataInput;
}

export interface UserCreateOneWithoutPaymentInput {
  create?: Maybe<UserCreateWithoutPaymentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateWithoutPaymentInput {
  id?: Maybe<ID_Input>;
  email: String;
  source_language?: Maybe<SourceLanguage>;
  target_language?: Maybe<TargetLanguage>;
  plan: Plan;
  type?: Maybe<UserType>;
  telegram_id?: Maybe<String>;
  telegram_chat_id?: Maybe<String>;
}

export type TelemetryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PaymentUpdateInput {
  provider_subscription_id?: Maybe<String>;
  provider_payment_id?: Maybe<String>;
  amount?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutPaymentInput>;
}

export interface TelemetryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<TelemetryType>;
  type_not?: Maybe<TelemetryType>;
  type_in?: Maybe<TelemetryType[] | TelemetryType>;
  type_not_in?: Maybe<TelemetryType[] | TelemetryType>;
  telemetry_key?: Maybe<String>;
  telemetry_key_not?: Maybe<String>;
  telemetry_key_in?: Maybe<String[] | String>;
  telemetry_key_not_in?: Maybe<String[] | String>;
  telemetry_key_lt?: Maybe<String>;
  telemetry_key_lte?: Maybe<String>;
  telemetry_key_gt?: Maybe<String>;
  telemetry_key_gte?: Maybe<String>;
  telemetry_key_contains?: Maybe<String>;
  telemetry_key_not_contains?: Maybe<String>;
  telemetry_key_starts_with?: Maybe<String>;
  telemetry_key_not_starts_with?: Maybe<String>;
  telemetry_key_ends_with?: Maybe<String>;
  telemetry_key_not_ends_with?: Maybe<String>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  AND?: Maybe<TelemetryWhereInput[] | TelemetryWhereInput>;
  OR?: Maybe<TelemetryWhereInput[] | TelemetryWhereInput>;
  NOT?: Maybe<TelemetryWhereInput[] | TelemetryWhereInput>;
}

export interface TelemetryUpdateInput {
  type?: Maybe<TelemetryType>;
  telemetry_key?: Maybe<String>;
  filename?: Maybe<String>;
  payload?: Maybe<Json>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  source_language?: Maybe<SourceLanguage>;
  source_language_not?: Maybe<SourceLanguage>;
  source_language_in?: Maybe<SourceLanguage[] | SourceLanguage>;
  source_language_not_in?: Maybe<SourceLanguage[] | SourceLanguage>;
  target_language?: Maybe<TargetLanguage>;
  target_language_not?: Maybe<TargetLanguage>;
  target_language_in?: Maybe<TargetLanguage[] | TargetLanguage>;
  target_language_not_in?: Maybe<TargetLanguage[] | TargetLanguage>;
  plan?: Maybe<Plan>;
  plan_not?: Maybe<Plan>;
  plan_in?: Maybe<Plan[] | Plan>;
  plan_not_in?: Maybe<Plan[] | Plan>;
  type?: Maybe<UserType>;
  type_not?: Maybe<UserType>;
  type_in?: Maybe<UserType[] | UserType>;
  type_not_in?: Maybe<UserType[] | UserType>;
  payment_every?: Maybe<PaymentWhereInput>;
  payment_some?: Maybe<PaymentWhereInput>;
  payment_none?: Maybe<PaymentWhereInput>;
  telegram_id?: Maybe<String>;
  telegram_id_not?: Maybe<String>;
  telegram_id_in?: Maybe<String[] | String>;
  telegram_id_not_in?: Maybe<String[] | String>;
  telegram_id_lt?: Maybe<String>;
  telegram_id_lte?: Maybe<String>;
  telegram_id_gt?: Maybe<String>;
  telegram_id_gte?: Maybe<String>;
  telegram_id_contains?: Maybe<String>;
  telegram_id_not_contains?: Maybe<String>;
  telegram_id_starts_with?: Maybe<String>;
  telegram_id_not_starts_with?: Maybe<String>;
  telegram_id_ends_with?: Maybe<String>;
  telegram_id_not_ends_with?: Maybe<String>;
  telegram_chat_id?: Maybe<String>;
  telegram_chat_id_not?: Maybe<String>;
  telegram_chat_id_in?: Maybe<String[] | String>;
  telegram_chat_id_not_in?: Maybe<String[] | String>;
  telegram_chat_id_lt?: Maybe<String>;
  telegram_chat_id_lte?: Maybe<String>;
  telegram_chat_id_gt?: Maybe<String>;
  telegram_chat_id_gte?: Maybe<String>;
  telegram_chat_id_contains?: Maybe<String>;
  telegram_chat_id_not_contains?: Maybe<String>;
  telegram_chat_id_starts_with?: Maybe<String>;
  telegram_chat_id_not_starts_with?: Maybe<String>;
  telegram_chat_id_ends_with?: Maybe<String>;
  telegram_chat_id_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateWithoutPaymentDataInput {
  email?: Maybe<String>;
  source_language?: Maybe<SourceLanguage>;
  target_language?: Maybe<TargetLanguage>;
  plan?: Maybe<Plan>;
  type?: Maybe<UserType>;
  telegram_id?: Maybe<String>;
  telegram_chat_id?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutPaymentInput {
  create?: Maybe<UserCreateWithoutPaymentInput>;
  update?: Maybe<UserUpdateWithoutPaymentDataInput>;
  upsert?: Maybe<UserUpsertWithoutPaymentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PaymentUpdateWithoutUserDataInput {
  provider_subscription_id?: Maybe<String>;
  provider_payment_id?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface PaymentUpdateManyWithWhereNestedInput {
  where: PaymentScalarWhereInput;
  data: PaymentUpdateManyDataInput;
}

export interface PaymentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PaymentWhereInput>;
  AND?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  OR?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  NOT?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
}

export interface PaymentUpdateManyWithoutUserInput {
  create?: Maybe<
    PaymentCreateWithoutUserInput[] | PaymentCreateWithoutUserInput
  >;
  delete?: Maybe<PaymentWhereUniqueInput[] | PaymentWhereUniqueInput>;
  connect?: Maybe<PaymentWhereUniqueInput[] | PaymentWhereUniqueInput>;
  set?: Maybe<PaymentWhereUniqueInput[] | PaymentWhereUniqueInput>;
  disconnect?: Maybe<PaymentWhereUniqueInput[] | PaymentWhereUniqueInput>;
  update?: Maybe<
    | PaymentUpdateWithWhereUniqueWithoutUserInput[]
    | PaymentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PaymentUpsertWithWhereUniqueWithoutUserInput[]
    | PaymentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PaymentScalarWhereInput[] | PaymentScalarWhereInput>;
  updateMany?: Maybe<
    | PaymentUpdateManyWithWhereNestedInput[]
    | PaymentUpdateManyWithWhereNestedInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  source_language: SourceLanguage;
  target_language: TargetLanguage;
  plan: Plan;
  type: UserType;
  telegram_id?: String;
  telegram_chat_id?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  source_language: () => Promise<SourceLanguage>;
  target_language: () => Promise<TargetLanguage>;
  plan: () => Promise<Plan>;
  type: () => Promise<UserType>;
  telegram_id: () => Promise<String>;
  telegram_chat_id: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  source_language: () => Promise<AsyncIterator<SourceLanguage>>;
  target_language: () => Promise<AsyncIterator<TargetLanguage>>;
  plan: () => Promise<AsyncIterator<Plan>>;
  type: () => Promise<AsyncIterator<UserType>>;
  telegram_id: () => Promise<AsyncIterator<String>>;
  telegram_chat_id: () => Promise<AsyncIterator<String>>;
}

export interface TelemetryConnection {
  pageInfo: PageInfo;
  edges: TelemetryEdge[];
}

export interface TelemetryConnectionPromise
  extends Promise<TelemetryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TelemetryEdge>>() => T;
  aggregate: <T = AggregateTelemetryPromise>() => T;
}

export interface TelemetryConnectionSubscription
  extends Promise<AsyncIterator<TelemetryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TelemetryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTelemetrySubscription>() => T;
}

export interface PaymentPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  provider_subscription_id: String;
  provider_payment_id: String;
  amount: Int;
}

export interface PaymentPreviousValuesPromise
  extends Promise<PaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  provider_subscription_id: () => Promise<String>;
  provider_payment_id: () => Promise<String>;
  amount: () => Promise<Int>;
}

export interface PaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  provider_subscription_id: () => Promise<AsyncIterator<String>>;
  provider_payment_id: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  source_language: SourceLanguage;
  target_language: TargetLanguage;
  plan: Plan;
  type: UserType;
  telegram_id?: String;
  telegram_chat_id?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  source_language: () => Promise<SourceLanguage>;
  target_language: () => Promise<TargetLanguage>;
  plan: () => Promise<Plan>;
  type: () => Promise<UserType>;
  payment: <T = FragmentableArray<Payment>>(args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  telegram_id: () => Promise<String>;
  telegram_chat_id: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  source_language: () => Promise<AsyncIterator<SourceLanguage>>;
  target_language: () => Promise<AsyncIterator<TargetLanguage>>;
  plan: () => Promise<AsyncIterator<Plan>>;
  type: () => Promise<AsyncIterator<UserType>>;
  payment: <T = Promise<AsyncIterator<PaymentSubscription>>>(args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  telegram_id: () => Promise<AsyncIterator<String>>;
  telegram_chat_id: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  source_language: () => Promise<SourceLanguage>;
  target_language: () => Promise<TargetLanguage>;
  plan: () => Promise<Plan>;
  type: () => Promise<UserType>;
  payment: <T = FragmentableArray<Payment>>(args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  telegram_id: () => Promise<String>;
  telegram_chat_id: () => Promise<String>;
}

export interface TelemetryPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: TelemetryType;
  telemetry_key: String;
  filename: String;
  payload: Json;
}

export interface TelemetryPreviousValuesPromise
  extends Promise<TelemetryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<TelemetryType>;
  telemetry_key: () => Promise<String>;
  filename: () => Promise<String>;
  payload: () => Promise<Json>;
}

export interface TelemetryPreviousValuesSubscription
  extends Promise<AsyncIterator<TelemetryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<TelemetryType>>;
  telemetry_key: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  payload: () => Promise<AsyncIterator<Json>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Telemetry {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: TelemetryType;
  telemetry_key: String;
  filename: String;
  payload: Json;
}

export interface TelemetryPromise extends Promise<Telemetry>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<TelemetryType>;
  telemetry_key: () => Promise<String>;
  filename: () => Promise<String>;
  payload: () => Promise<Json>;
}

export interface TelemetrySubscription
  extends Promise<AsyncIterator<Telemetry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<TelemetryType>>;
  telemetry_key: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  payload: () => Promise<AsyncIterator<Json>>;
}

export interface TelemetryNullablePromise
  extends Promise<Telemetry | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<TelemetryType>;
  telemetry_key: () => Promise<String>;
  filename: () => Promise<String>;
  payload: () => Promise<Json>;
}

export interface Payment {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  provider_subscription_id: String;
  provider_payment_id: String;
  amount: Int;
}

export interface PaymentPromise extends Promise<Payment>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  provider_subscription_id: () => Promise<String>;
  provider_payment_id: () => Promise<String>;
  amount: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface PaymentSubscription
  extends Promise<AsyncIterator<Payment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  provider_subscription_id: () => Promise<AsyncIterator<String>>;
  provider_payment_id: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
}

export interface PaymentNullablePromise
  extends Promise<Payment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  provider_subscription_id: () => Promise<String>;
  provider_payment_id: () => Promise<String>;
  amount: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface TelemetryEdge {
  node: Telemetry;
  cursor: String;
}

export interface TelemetryEdgePromise
  extends Promise<TelemetryEdge>,
    Fragmentable {
  node: <T = TelemetryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TelemetryEdgeSubscription
  extends Promise<AsyncIterator<TelemetryEdge>>,
    Fragmentable {
  node: <T = TelemetrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType;
  node: Payment;
  updatedFields: String[];
  previousValues: PaymentPreviousValues;
}

export interface PaymentSubscriptionPayloadPromise
  extends Promise<PaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentPreviousValuesPromise>() => T;
}

export interface PaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentPreviousValuesSubscription>() => T;
}

export interface TelemetrySubscriptionPayload {
  mutation: MutationType;
  node: Telemetry;
  updatedFields: String[];
  previousValues: TelemetryPreviousValues;
}

export interface TelemetrySubscriptionPayloadPromise
  extends Promise<TelemetrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TelemetryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TelemetryPreviousValuesPromise>() => T;
}

export interface TelemetrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TelemetrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TelemetrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TelemetryPreviousValuesSubscription>() => T;
}

export interface PaymentEdge {
  node: Payment;
  cursor: String;
}

export interface PaymentEdgePromise extends Promise<PaymentEdge>, Fragmentable {
  node: <T = PaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentEdgeSubscription
  extends Promise<AsyncIterator<PaymentEdge>>,
    Fragmentable {
  node: <T = PaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePayment {
  count: Int;
}

export interface AggregatePaymentPromise
  extends Promise<AggregatePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentSubscription
  extends Promise<AsyncIterator<AggregatePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentConnection {
  pageInfo: PageInfo;
  edges: PaymentEdge[];
}

export interface PaymentConnectionPromise
  extends Promise<PaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentEdge>>() => T;
  aggregate: <T = AggregatePaymentPromise>() => T;
}

export interface PaymentConnectionSubscription
  extends Promise<AsyncIterator<PaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentSubscription>() => T;
}

export interface AggregateTelemetry {
  count: Int;
}

export interface AggregateTelemetryPromise
  extends Promise<AggregateTelemetry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTelemetrySubscription
  extends Promise<AsyncIterator<AggregateTelemetry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Json = any;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "SourceLanguage",
    embedded: false
  },
  {
    name: "TargetLanguage",
    embedded: false
  },
  {
    name: "Plan",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Payment",
    embedded: false
  },
  {
    name: "TelemetryType",
    embedded: false
  },
  {
    name: "Telemetry",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://api-prisma.divyendusingh.com/lingoparrot/${
    process.env["PRISMA_SERVICE_STAGE"]
  }`,
  secret: `{env:PRISMA_SERVICE_SECRET}`
});
export const prisma = new Prisma();
